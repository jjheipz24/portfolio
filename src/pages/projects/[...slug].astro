---
import '@fontsource-variable/inter';
import Layout from '../../layouts/Layout.astro'
import projects from '../../project-data'
import ImageCarousel from '../../components/ImageCarousel.astro'
import { marked } from 'marked'

export function getStaticPaths() {
    // return [
    //     { params: { project: 'sprout' } },
    //     { params: { project: 'g-rex' } },
    //     { params: { project: 'hate-crimes' } },
    // ]
    return projects.map(({ title, body, slug, tech, images, link, summary }) => {
        return {
            params: { slug },
            props: { title, body, slug, tech, images, link, summary }
        }
    })
}

const { title, body, tech, images, link, summary } = Astro.props
const uniqueId = title.toLowerCase().replace(/\s+/g, '-') + '-carousel'
---
<Layout title={title}>
    <div
    slot='hero-content'
    class='hero-content items-center justify-center lg:flex-row w-full h-1/2 px-4 sm:px-8'
  >
      <h1
        class="font-['Inter_Variable'] font-medium text-white text-4xl sm:text-6xl lg:text-8xl flex-none w-auto text-center"
      >
        {title}
      </h1>
  </div>
  <main class='bg-[#1E293B] mt-8 px-4 sm:px-8'>
    <section class="flex flex-wrap justify-center gap-4 sm:gap-6 py-8">
    {tech && tech.map((item: string) => (
       <span class="rounded-full border border-slate-300 bg-transparent text-slate-300 font-normal text-sm sm:text-base lg:text-xl py-1 px-3">{item}</span>
    ))}
    </section>
    
    <!-- Two-column content section -->
    <section class="flex flex-col lg:flex-row items-start justify-center gap-8 py-10 px-4 lg:px-8 max-w-[95%] lg:max-w-[90%] mx-auto">
      <!-- Left column: Text and button -->
      <div class="w-full lg:w-2/5">
        <div class="relative mb-8 rounded-2xl bg-white/5 ring-1 ring-white/10 shadow-lg p-6">
          <div class="pointer-events-none absolute left-0 top-0 h-full w-1 rounded-l-2xl bg-[#BB96EA]"></div>
          <p class="text-[#E5E7EB] font-['Inter_Variable'] text-lg sm:text-xl leading-relaxed">
            {body}
          </p>
        </div>

        {summary && Array.isArray(summary) && summary.length > 0 && (
          <div class="space-y-6 mb-8">
            {summary.map((item: any) => (
              <>
                {typeof item === 'string' ? (
                  <div class="prose prose-invert max-w-none prose-headings:text-white prose-p:text-slate-300 prose-li:text-slate-300 prose-strong:text-slate-100 prose-a:text-[#BB96EA] hover:prose-a:text-[#A46DEA]">
                    <div set:html={marked(item)} />
                  </div>
                ) : item && typeof item === 'object' ? (
                  item.type === 'info' ? (
                    <div class="relative rounded-lg border border-blue-500/30 bg-blue-500/10 p-4 my-4">
                      <div class="pointer-events-none absolute left-0 top-0 h-full w-1 rounded-l-lg bg-blue-500"></div>
                      <div class="flex items-start gap-3 pl-4">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-blue-400 flex-shrink-0 mt-0.5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                        </svg>
                        <div class="prose prose-invert max-w-none prose-p:text-slate-200 prose-p:text-sm prose-p:my-0 prose-a:text-[#BB96EA] hover:prose-a:text-[#A46DEA]">
                          <div set:html={marked(item.content)} />
                        </div>
                      </div>
                    </div>
                  ) : (
                    <div class="prose prose-invert max-w-none prose-headings:text-white prose-p:text-slate-300 prose-li:text-slate-300 prose-strong:text-slate-100 prose-a:text-[#BB96EA] hover:prose-a:text-[#A46DEA]">
                      {item.heading && (
                        <h3 class="text-white text-lg sm:text-xl font-medium mb-2">{item.heading}</h3>
                      )}
                      {Array.isArray(item.paragraphs) && item.paragraphs.map((p: string) => (
                        <div>
                          <div set:html={marked(p)} />
                        </div>
                      ))}
                    </div>
                  )
                ) : null}
              </>
            ))}
          </div>
        )}
        
        {link ? (
          <a
            href={link}
            target="_blank"
            rel="noopener noreferrer"
            class="inline-block py-2 px-6 rounded-full text-white bg-[#BB96EA] hover:bg-[#A46DEA] hover:text-white hover:drop-shadow-md duration-300 text-base font-medium"
          >
            Explore
          </a>
        ) : (
          <div class="inline-flex items-center gap-2 py-2 px-6 rounded-full border border-slate-400 text-slate-400 text-base font-medium">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
            </svg>
            School project - No longer viewable
          </div>
        )}
      </div>
      
      <!-- Right column: Image carousel or placeholder -->
      <div class="w-full lg:w-3/5 flex justify-center">
        {images && images.length > 0 ? (
          <ImageCarousel images={images} id={uniqueId} />
        ) : (
          <div class="w-full h-[350px] lg:h-[600px] rounded-lg bg-gradient-to-br from-[#14B8A6] to-[#0D9488] flex items-center justify-center shadow-lg">
            <span class="text-white font-['Inter_Variable'] text-lg opacity-30">Image Placeholder</span>
          </div>
        )}
      </div>
    </section>
  </main>
</Layout>
